package requiredjava;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.IOException;
import java.util.Map;
import java.util.Map.Entry;
import sun.tools.jconsole.LocalVirtualMachine;
/**
 *
 * @author hduser
 */
public class HadoopManipulation {
    // Namenode's JVM service name
	private static final String RESOURCE_SERVICE_NAME = "org.apache.hadoop.yarn.server.resourcemanager.ResourceManager";
	private static final String NAMENODE_SERVICE_NAME = "org.apache.hadoop.hdfs.server.namenode.NameNode";
	private static final String HDFS_START_COMMAND = "/usr/local/hadoop/sbin/start-dfs.sh";
	private static final String HDFS_STOP_COMMAND = "/usr/local/hadoop/sbin/stop-dfs.sh";
	private static final String YARN_START_COMMAND = "/usr/local/hadoop/sbin/start-yarn.sh";
	private static final String YARN_STOP_COMMAND = "/usr/local/hadoop/sbin/stop-yarn.sh";
	private static final String HISTORY_SERVER_START_COMMAND = "/usr/local/hadoop/sbin/mr-jobhistory-daemon.sh start historyserver";
	private static final String HISTORY_SERVER_STOP_COMMAND = "/usr/local/hadoop/sbin/mr-jobhistory-daemon.sh stop historyserver";
    	
	//startall
	public static void startAll(){
		try {
			Process p = Runtime.getRuntime().exec(HDFS_START_COMMAND); p.waitFor();
			p = Runtime.getRuntime().exec(YARN_START_COMMAND); p.waitFor();
			p = Runtime.getRuntime().exec(HISTORY_SERVER_START_COMMAND); p.waitFor();
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	//stopall
	public static void stopAll(){
		try {
			Process p = Runtime.getRuntime().exec(HDFS_STOP_COMMAND); p.waitFor();
			p = Runtime.getRuntime().exec(YARN_STOP_COMMAND); p.waitFor();
			p = Runtime.getRuntime().exec(HISTORY_SERVER_STOP_COMMAND); p.waitFor();
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
	}
	// Static method to check whether namenode's jvm is running or not
	public static boolean getStatus() {
		Map<Integer, LocalVirtualMachine> jvms = LocalVirtualMachine.getAllVirtualMachines();
		int cnt = 0;
		for(final Entry<Integer, LocalVirtualMachine> entry : jvms.entrySet()){
			if(cnt == 2)
				return true;
			if(NAMENODE_SERVICE_NAME.equalsIgnoreCase(entry.getValue().displayName()))
				++cnt;
			if(RESOURCE_SERVICE_NAME.equalsIgnoreCase(entry.getValue().displayName()))
				++cnt;
		}
		return false;
	}
}







